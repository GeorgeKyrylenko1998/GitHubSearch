//
//  SearchControllerPresenter.swift
//  GithubSearch
//
//  Created George Kyrylenko on 30.08.2020.
//  Copyright © 2020 TestApp. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class SearchControllerPresenter: SearchControllerPresenterProtocol {

    weak private var view: SearchControllerViewProtocol?
    var interactor: SearchControllerInteractorProtocol?
    private let router: SearchControllerWireframeProtocol
    var oldSearh: String?
    var page = 1
    
    init(interface: SearchControllerViewProtocol, interactor: SearchControllerInteractorProtocol?, router: SearchControllerWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    func searchRepo(by name: String) {
        guard isLoginedUser() else{
            view?.onError(error: "Is not loggined user")
            return
        }
        if name != oldSearh{
            oldSearh = name
            page = 2
        }
        interactor?.searchRepo(by: name, page: page)
        page += 2
    }
    
    func markAsViewed(repo: RepoUIModel) {
        interactor?.markAsRepoViewed(by: repo.url)
    }

    func add(firstResult: RepositoriesModel, secondResult: RepositoriesModel) {
        guard var result = firstResult.items, let secondResult = secondResult.items else {return}
        result.append(contentsOf: secondResult)
        let resultsForUI = result.map { (repo) -> RepoUIModel in
            return RepoUIModel(_name: repo.name, _url: repo.htmlURL, _stars: repo.stargazersCount, _isViewed: false)
        }
        view?.add(searchResults: resultsForUI, isNewSearch: page == 4)
    }
    
    func getStoredResults() {
        interactor?.getStoredResults()
    }
    
    func remove(repo: RepoUIModel) {
        interactor?.removeRepo(by: repo.url)
    }
    
    func setStoredResults(results: [RepoRealmModel]) {
        let repos = results.map { (repo) -> RepoUIModel in
            return RepoUIModel(_name: repo.name, _url: repo.url, _stars: repo.stars, _isViewed: repo.isViewd)
        }.sorted { (repo1, repo2) -> Bool in
            return repo1.stars ?? 0 > repo2.stars ?? 0
        }
        view?.add(searchResults: repos, isNewSearch: true)
    }
    
    func isLoginedUser() -> Bool {
        return CurrentUserDefaultsManager.getUserKey() != nil
    }
    
    func login(with email: String, and password: String) {
        interactor?.login(with: email, and: password)
    }
    
    func logOut(){
        CurrentUserDefaultsManager.cleanUserDefaults()
    }
    
    func loginSuccess() {
        view?.loginSuccess()
    }
    
    func onError(error: Error) {
        view?.onError(error: error.localizedDescription)
    }
}
