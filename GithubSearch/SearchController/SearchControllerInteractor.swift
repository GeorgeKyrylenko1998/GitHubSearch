//
//  SearchControllerInteractor.swift
//  GithubSearch
//
//  Created George Kyrylenko on 30.08.2020.
//  Copyright © 2020 TestApp. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import RxSwift
import RxCocoa

class SearchControllerInteractor: SearchControllerInteractorProtocol {
    
    weak var presenter: SearchControllerPresenterProtocol?
    let gitManager = GitManager()
    let disposeBag = DisposeBag()
    let realmManager = RealmManager()
    
    func searchRepo(by name: String, page: Int) {
        Observable.zip(gitManager.searchRepos(with: name, page: page-1), gitManager.searchRepos(with: name, page: page)).subscribe(onNext: {[weak self] (response) in
            let firstResponse = response.0
            let secondResponse = response.1
            self?.presenter?.add(firstResult: firstResponse, secondResult: secondResponse)
            self?.saveResultsToRealm(reposModel: firstResponse)
            self?.saveResultsToRealm(reposModel: secondResponse)
            
        }, onError: {[weak self] (error) in
            self?.presenter?.onError(error: error)
        }, onCompleted: {
            
        }, onDisposed: {
            
        }).disposed(by: disposeBag)
    }
    
    func login(with email: String, and password: String){
        gitManager.loginUser(login: email, password: password).subscribe(onNext: {[weak self] (userModel) in
            CurrentUserDefaultsManager.setUserKey(key: "\(email):\(password)".toBase64())
            self?.presenter?.loginSuccess()
        }, onError: {[weak self] (error) in
            self?.presenter?.onError(error: error)
        }, onCompleted: nil, onDisposed: nil).disposed(by: disposeBag)
    }
    
    func saveResultsToRealm(reposModel: RepositoriesModel){
        guard let arrayOfRealmRepos = reposModel.items?.map({ (repo) -> RepoRealmModel in
            return RepoRealmModel(_name: repo.name, _url: repo.htmlURL, _stars: repo.stargazersCount)
        }) else {return}
        realmManager.addRepos(repos: arrayOfRealmRepos)
    }
    
    func getStoredResults() {
        let repos = realmManager.getViewedRepos()
        presenter?.setStoredResults(results: repos)
    }
    
    func removeRepo(by url: String?) {
        realmManager.removeRepo(by: url)
    }
    
    func markAsRepoViewed(by URL: String?) {
        realmManager.markAsViwedRepo(by: URL)
    }
    
}
